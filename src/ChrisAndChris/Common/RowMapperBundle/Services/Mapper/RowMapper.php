<?php
namespace ChrisAndChris\Common\RowMapperBundle\Services\Mapper;

use ChrisAndChris\Common\RowMapperBundle\Entity\Entity;
use ChrisAndChris\Common\RowMapperBundle\Exceptions\DatabaseException;
use ChrisAndChris\Common\RowMapperBundle\Exceptions\InvalidOptionException;
use ChrisAndChris\Common\RowMapperBundle\Services\Mapper\Encryption\EncryptionServiceInterface;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * @name RowMapper
 * @version   2.0.1
 * @since     v1.0.0
 * @package   RowMapperBundle
 * @author    ChrisAndChris
 * @link      https://github.com/chrisandchris
 */
class RowMapper {

    /** @var EncryptionServiceInterface[] */
    private $encryptionServices = [];

    /**
     * Add a new encryption ability
     *
     * @param EncryptionServiceInterface $encryptionService
     */
    public function addEncryptionAbility(EncryptionServiceInterface $encryptionService) {
        $this->encryptionServices[] = $encryptionService;
    }

    /**
     * Map a single result from a statement
     *
     * @param \PDOStatement $statement the statement to map
     * @param Entity        $entity    the entity to map into
     * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
     */
    public function mapSingleFromResult(\PDOStatement $statement, Entity $entity) {
        $list = $this->mapFromResult($statement, $entity, 1);
        if (count($list) == 0) {
            throw new NotFoundHttpException;
        }

        return $list[0];
    }

    /**
     * Maps a result from a statement into an entity
     *
     * @param \PDOStatement $statement the statement to map
     * @param Entity        $entity    the entity to use
     * @param int           $limit     max amount of rows to map
     * @return array list of mapped rows
     */
    public function mapFromResult(\PDOStatement $statement, Entity $entity, $limit = null) {
        $return = [];
        $count = 0;
        while (false !== ($row = $statement->fetch(\PDO::FETCH_ASSOC)) &&
            (++$count <= $limit || $limit === null)) {
            $return[] = $this->mapRow($row, clone $entity);
        }

        return $return;
    }

    /**
     * Map a single row by calling setter if possible or
     * accessing the properties directly if no setter available<br />
     * <br />
     * The setter name is generated by a key of $row, by following rules:<br />
     * <ul>
     *  <li>underscores are removed, next letter is uppercase</li>
     *  <li>first letter goes uppercase</li>
     *  <li>a "set" string is added to the beginning</li>
     * </ul>
     *
     * @param array $row    the single row to map
     * @param       $entity Entity entity to map to
     * @return Entity mapped entity
     * @throws DatabaseException if there is no such property
     */
    public function mapRow(array $row, Entity $entity) {
        foreach ($row as $field => $value) {
            $methodName = $this->buildMethodName($field);
            if (method_exists($entity, $methodName)) {
                $entity->$methodName($value);
            } else {
                if (property_exists($entity, $field)) {
                    $entity->$field = $value;
                } else {
                    throw new DatabaseException(sprintf('No property %s found for Entity', $field));
                }
            }
        }

        $entity = $this->runDecryption($entity);

        return $entity;
    }

    /**
     * Build a method name
     *
     * @param $key
     * @return string
     */
    public function buildMethodName($key) {
        $partials = explode('_', $key);
        foreach ($partials as $idx => $part) {
            $partials[$idx] = ucfirst($part);
        }

        return 'set' . implode('', $partials);
    }

    /**
     * Run the decryption process
     *
     * @param Entity $entity
     * @return Entity
     */
    private function runDecryption(Entity $entity) {
        foreach ($this->encryptionServices as $encryptionService) {
            if ($encryptionService->isResponsible($entity)) {
                return $encryptionService->decrypt($entity);
            }
        }

        return $entity;
    }

    /**
     * Maps a statement to an associative array<br />
     * <br />
     * The closure is used to map any row, it must give back an array.<br />
     * The array <i>may</i> contain an index "key" with the desired key value
     * of the returned array and it <i>must</i> contain an index "value" with
     * the value to map
     *
     *
     * @param \PDOStatement $statement the statement to map
     * @param Entity        $entity    the entity to map from
     * @param \Closure      $callable  the callable to use to map any row
     * @return array
     * @throws InvalidOptionException if invalid input is given
     */
    public function mapToArray($statement, Entity $entity, \Closure $callable) {
        $array = $this->mapFromResult($statement, $entity);
        $return = [];
        foreach ($array as $row) {
            $a = $callable($row);
            if (!is_array($a)) {
                throw new InvalidOptionException('Callable must return array with at lest index "value"');
            }
            if (isset($a['key']) && !empty($a['key'])) {
                $return[$a['key']] = $a['value'];
            } else {
                $return[] = $a['value'];
            }
        }

        return $return;
    }
}
